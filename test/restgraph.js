// Generated by CoffeeScript 1.9.3
(function() {
  var graph, jref, method, node, ref, restgraph, rg, u, v;

  jref = require('json-ref-lite');

  graph = jref.resolve({
    searchquery: {
      type: "object",
      properties: {
        category: {
          type: "string"
        },
        query: {
          type: "string"
        }
      }
    },
    items: {
      type: "array",
      items: [
        {
          "$ref": "#/item"
        }
      ],
      data: {
        get: {
          config: {
            method: 'get',
            url: '/json/books.json',
            payload: {
              category: '{#/searchquery/properties/category/value}',
              query: '{#/searchquery/properties/query/value}'
            }
          },
          data: "{response.data}"
        }
      }
    },
    item: {
      type: "object",
      properties: {
        id: {
          type: "number",
          "default": 12
        },
        name: {
          type: "string",
          "default": 'John Doe'
        },
        category: {
          type: "string",
          "default": 'amsterdam'
        }
      },
      data: {
        get: {
          config: {
            method: 'get',
            url: '/json/books.json',
            payload: {
              id: '{#/item/properties/id/value}'
            }
          },
          data: "{response.data[0]}"
        },
        post: {
          type: "request",
          config: {
            method: "post",
            url: '/book',
            payload: {
              'fullname': '{book.name}',
              'firstname': '{firstname}',
              'category': '{book.category}'
            },
            schema: {
              "$ref": "#/book"
            }
          },
          data: "{response}"
        }
      }
    }
  });

  restgraph = {
    create: function(graph) {
      this.graph = graph;
      this.get = function(node) {
        return this.graph[node].properties;
      };
      return this;
    }
  };

  for (node in graph) {
    v = graph[node];
    if (v.data != null) {
      ref = v.data;
      for (method in ref) {
        u = ref[method];
        graph[node].data[method] = (function(graph, method) {
          return function(cb) {
            var req;
            console.dir(method.config);
            req = jref.evaluate(method.config, graph);
            console.log("doing request:");
            console.dir(req);
            method.response = {
              data: ["this", "is", "fake", "data"]
            };
            return cb((jref.evaluate({
              '_': method.data
            }, method))['_']);
          };
        })(graph, graph[node].data[method]);
      }
    }
  }

  rg = restgraph.create(jref.resolve(graph));

  rg.get('searchquery').query.value = "foo";

  rg.get('searchquery').category.value = "scifi";

  graph.items.data.get(function(data) {
    return console.log("\n->receive: " + data);
  });

}).call(this);
