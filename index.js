// Generated by CoffeeScript 1.9.3
(function() {
  var clone, expr, fs, request;

  fs = (typeof window === "undefined" || window === null ? require('fs') : false);

  request = (fs && fs.existsSync(__dirname + '/../sync-request') ? require('sync-request') : false);

  expr = require('property-expr');

  clone = function(obj) {
    return JSON.parse(JSON.stringify(obj));
  };

  module.exports = (function() {
    this.cache = {};
    this.findIds = function(json, ids) {
      var id, k, obj, v;
      id = false;
      obj = {};
      for (k in json) {
        v = json[k];
        if (json.id != null) {
          id = json.id;
        }
        if (id && k !== "id") {
          obj[k] = v;
        }
        if (typeof v === 'object') {
          this.findIds(v, ids);
        }
      }
      if (id) {
        return ids[id] = obj;
      }
    };
    this.get_json_pointer = function(ref, root) {
      var err, evalstr, result;
      evalstr = ref.replace(/\\\//, '#SLASH#').replace(/\//g, '.').replace(/#SLASH#/, '/');
      evalstr = evalstr.replace(/#\./, '');
      try {
        if (process.env.DEBUG != null) {
          console.log(evalstr);
        }
        result = expr.getter(evalstr)(root);
      } catch (_error) {
        err = _error;
        result = "";
      }
      return result;
    };
    this.replace = function(json, ids, root) {
      var jsonpointer, k, ref, results, str, v;
      results = [];
      for (k in json) {
        v = json[k];
        if ((v != null) && (v['$ref'] != null)) {
          ref = v['$ref'];
          if (Array.isArray(ref)) {
            results.push(ref = this.replace(ref, ids, root));
          } else if (ids[ref] != null) {
            results.push(json[k] = ids[ref]);
          } else if (request && String(ref).match(/^http/)) {
            if (!this.cache[ref]) {
              this.cache[ref] = JSON.parse(request("GET", ref).getBody().toString());
            }
            json[k] = this.cache[ref];
            if (ref.match("#")) {
              jsonpointer = ref.replace(/.*#/, '#');
              if (jsonpointer.length) {
                results.push(json[k] = this.get_json_pointer(jsonpointer, json[k]));
              } else {
                results.push(void 0);
              }
            } else {
              results.push(void 0);
            }
          } else if (fs && fs.existsSync(ref)) {
            str = fs.readFileSync(ref).toString();
            if (str.match(/module\.exports/)) {
              results.push(json[k] = require(ref));
            } else {
              results.push(json[k] = JSON.parse(str));
            }
          } else if (String(ref).match(/^#\//)) {
            results.push(json[k] = this.get_json_pointer(ref, root));
          } else {
            results.push(void 0);
          }
        } else {
          if (typeof v === 'object') {
            results.push(this.replace(v, ids, root));
          } else {
            results.push(void 0);
          }
        }
      }
      return results;
    };
    this.resolve = function(json) {
      var ids;
      ids = {};
      this.findIds(json, ids);
      this.replace(json, ids, json);
      return json;
    };
    this.evaluate = function(json, data, cb) {
      var k, ref1, v;
      if (cb == null) {
        cb = this.evaluateStr;
      }
      ref1 = clone(json);
      for (k in ref1) {
        v = ref1[k];
        if (typeof v === 'string') {
          json[k] = cb(v, data);
        }
        if (typeof v === 'object') {
          json[k] = this.evaluate(v, data);
        }
      }
      return json;
    };
    this.evaluateStr = function(k, data) {
      var itemstr;
      if (typeof k !== 'string') {
        return k;
      }
      itemstr = k.replace(/(\{)(.*?)(\})/g, function($0, $1, $2) {
        var err, result;
        result = '';
        if ((data == null) || ($2 == null)) {
          return result;
        }
        if ((data[$2] != null) && typeof data[$2] === 'function') {
          result = data[$2]();
        } else {
          if (data[$2] != null) {
            result = data[$2];
          } else {
            try {
              $2 = $2.replace(/^#\//, '').replace(/\//g, '.');
              result = expr.getter($2)(data);
            } catch (_error) {
              err = _error;
              result = '';
            }
            if (result == null) {
              result = '';
            }
          }
        }
        this.evaluateStr(result, data);
        return result;
      });
      return itemstr;
    };
    return this;
  })();

}).call(this);
